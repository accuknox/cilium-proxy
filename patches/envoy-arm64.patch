diff --git a/bazel/com_lightstep_tracer_cpp.patch b/bazel/com_lightstep_tracer_cpp.patch
new file mode 100644
index 0000000000..4b91501df1
--- /dev/null
+++ b/bazel/com_lightstep_tracer_cpp.patch
@@ -0,0 +1,81 @@
+commit a5705f2f9358888f009aa7e85b64dbcef1c1ead4
+Author: Ryan <ryan.burn@gmail.com>
+Date:   Wed Aug 12 09:58:01 2020 -0700
+
+    Fix build for unsigned-char (#249)
+    
+    * Fix build for unsigned-char
+    
+    * Fix typo
+
+diff --git a/.circleci/config.yml b/.circleci/config.yml
+index 4f72075..a9a1624 100644
+--- a/.circleci/config.yml
++++ b/.circleci/config.yml
+@@ -44,6 +44,19 @@ jobs:
+       - run: ./ci/install_bazel.sh
+       - run: ./ci/do_ci.sh bazel.test
+ 
++  # Verify that we can work on architectures that default to use an unsigned char
++  # See https://github.com/lightstep/lightstep-tracer-cpp/issues/246
++  #     https://github.com/lightstep/lightstep-tracer-cpp/pull/245
++  unsigned_char_test:
++    resource_class: xlarge
++    docker:
++      - image: ubuntu:18.04
++    steps:
++      - checkout
++      - run: ./ci/setup_build_environment.sh
++      - run: ./ci/install_bazel.sh
++      - run: ./ci/do_ci.sh bazel.unsigned_char.test
++
+   asan:
+     resource_class: xlarge
+     docker:
+@@ -294,6 +307,7 @@ workflows:
+       - cmake_no_grpc
+       - cmake_with_grpc
+       - test
++      - unsigned_char_test
+       - asan
+       - tsan
+       - windows
+diff --git a/ci/do_ci.sh b/ci/do_ci.sh
+index 89a6ff5..83827ec 100755
+--- a/ci/do_ci.sh
++++ b/ci/do_ci.sh
+@@ -79,6 +79,10 @@ elif [[ "$1" == "bazel.test" ]]; then
+   bazel build -c dbg $BAZEL_OPTIONS -- //... -//benchmark/...
+   bazel test -c dbg $BAZEL_TEST_OPTIONS //...
+   exit 0
++elif [[ "$1" == "bazel.unsigned_char.test" ]]; then
++  bazel build -c dbg --copt -funsigned-char $BAZEL_OPTIONS -- //... -//benchmark/...
++  bazel test -c dbg --copt -funsigned-char $BAZEL_TEST_OPTIONS //...
++  exit 0
+ elif [[ "$1" == "bazel.asan" ]]; then
+   setup_clang_toolchain
+   bazel test -c dbg \
+diff --git a/src/common/utility.cpp b/src/common/utility.cpp
+index 3c97a1d..dda85bc 100644
+--- a/src/common/utility.cpp
++++ b/src/common/utility.cpp
+@@ -51,7 +51,8 @@ timeval ToTimeval(std::chrono::microseconds microseconds) {
+ static void WriteEscapedString(std::ostringstream& writer,
+                                opentracing::string_view s) {
+   writer << '"';
+-  for (char c : s) {
++  for (auto c_prime : s) {
++    auto c = static_cast<signed char>(c_prime);
+     switch (c) {
+       case '"':
+         writer << R"(\")";
+@@ -72,7 +73,8 @@ static void WriteEscapedString(std::ostringstream& writer,
+         writer << R"(\t)";
+         break;
+       default:
+-        if ('\x00' <= c && c <= '\x1f') {
++        if (static_cast<signed char>('\x00') <= c &&
++            c <= static_cast<signed char>('\x1f')) {
+           writer << R"(\u)";
+           writer << std::hex << std::setw(4) << std::setfill('0')
+                  << static_cast<int>(c);
diff --git a/bazel/repositories.bzl b/bazel/repositories.bzl
index ef048fb321..d3cd459a58 100644
--- a/bazel/repositories.bzl
+++ b/bazel/repositories.bzl
@@ -371,7 +371,12 @@ def _io_opentracing_cpp():
     )
 
 def _com_lightstep_tracer_cpp():
-    _repository_impl("com_lightstep_tracer_cpp")
+    _repository_impl(
+        name = "com_lightstep_tracer_cpp",
+        patch_args = ["-p1"],
+	# Fix for unsigned char in arm64
+        patches = ["@envoy//bazel:com_lightstep_tracer_cpp.patch"],
+    )
     native.bind(
         name = "lightstep",
         actual = "@com_lightstep_tracer_cpp//:manual_tracer_lib",
